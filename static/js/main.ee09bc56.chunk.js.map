{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Icon.js","components/WeatherCard/Condition.js","components/WeatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Icon","props","img","icon","condition","className","src","Condition","temp","Temp","State","WeatherCard","highColor","lowColor","bg","Card","WeatherEngine","location","useState","query","setQuery","weather","setWeather","getWeather","q","a","fetch","apiRes","json","resJSON","main","name","sys","useEffect","WeatherEnginePack","value","onChange","e","target","onClick","preventDefault","then","res","handleSearch","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee09bc56.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Location = ({ city, country }) => {\n  const Container = styled.div`\n    text-align: center;\n  `;\n  const City = styled.h1`\n    font-family: \"Merriweather\", sans-serif;\n    font-size: 1.8em;\n    margin: 0 auto;\n  `;\n\n  const Country = styled.h3`\n    font-family: \"Fira-Sans\", sans-serif;\n    font-size: 1.1rem;\n    margin: 0 auto;\n  `;\n\n  return (\n    <Container>\n      <City>{city}</City>\n      <Country>{country}</Country>\n    </Container>\n  );\n};\n\nexport default Location;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Icon = (props) => {\n  const Icon = styled.img`\n    width: 20%;\n    margin: 0 auto;\n    padding: 0 auto;\n  `;\n\n  var icon = \"\";\n  switch (props.condition) {\n    case \"Clouds\":\n      icon = `./img/Mostly Cloudy-2x.png`;\n      break;\n    case \"Clear\":\n      icon = `./img/Mostly Sunny-2x.png`;\n      break;\n    case \"Haze\":\n      icon = `./img/Haze-2x.png`;\n      break;\n    case \"Hail\":\n      icon = `./img/Hail-2x.png`;\n      break;\n    case \"Fog\":\n      icon = `./img/Fog-2x.png`;\n      break;\n    case \"Tornado\":\n      icon = `./img/Tornado-2x.png`;\n      break;\n    case \"Dust\":\n      icon = `./img/Dust-2x.png`;\n      break;\n    case \"Mist\":\n      icon = `./img/Fog-2x.png`;\n      break;\n    case \"Snow\":\n      icon = `./img/Snow-2x.png`;\n      break;\n    case \"Rain\":\n      icon = `./img/Rain-2x.png`;\n      break;\n    case \"Drizzle\":\n      icon = `./img/Drizzle-2x.png`;\n      break;\n    case \"Thunderstorm\":\n      icon = `./img/Severe Thunderstorm-2x.png`;\n      break;\n    default:\n      icon = `./img/Fog-2x.png`;\n      break;\n  }\n\n  return <Icon className=\"icon\" src={icon} />;\n};\n\nexport default Icon;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Condition = ({ temp, condition }) => {\n  const Temp = styled.h1`\n    font-family: \"Fira Sans\", sans-serif;\n    font-size: 2 rem;\n    font-weight: 200;\n    margin: 0 auto;\n  `;\n\n  const State = styled.h3`\n    font-family: \"Merriweather\";\n    font-size: 1.2 rem;\n    margin: 0 auto;\n  `;\n\n  return (\n    <>\n      <Temp>{temp}Â°F</Temp>\n      <State>{condition}</State>\n    </>\n  );\n};\n\nexport default Condition;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Location from \"./Location\";\nimport Icon from \"./Icon\";\nimport Condition from \"./Condition\";\n\n//Hot weather 60->110 degrees F vs 12-> 40 degrees C\n//Cold weather 25->60 degrees F vs -20->12 degrees C\n\nconst WeatherCard = ({ temp, condition, city, country }) => {\n  let highColor = 0;\n  let lowColor = 0;\n  let bg = null;\n  if (temp > 60) {\n    //for hot weather\n    highColor = (1 - (temp - 60) / (110 - 60)) * 255;\n    lowColor = highColor - 150;\n    bg = `linear-gradient(\n      to top,\n      rgb(255, ${highColor}, 0),\n      rgb(255, ${lowColor}, 0)\n    );`;\n  } else if (temp <= 60) {\n    //for cold weather\n    highColor = (1 - (temp - 25) / (60 - 25)) * 255;\n    lowColor = highColor - 150;\n    bg = `linear-gradient(\n      to top,\n      rgb(0, ${highColor}, 255),\n      rgb(0, ${lowColor}, 255)\n    );`;\n  }\n\n  const Card = styled.div`\n    margin: 0 auto;\n    background: ${bg};\n    width: 200px;\n    height: 240px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 15px;\n  `;\n  return (\n    <Card>\n      <Location city={city} country={country} />\n      <Icon condition={condition} />\n      <Condition temp={temp} condition={condition} />\n    </Card>\n  );\n};\n\nexport default WeatherCard;\n","import React, { useState, useEffect } from \"react\";\nimport WeatherCard from \"./WeatherCard/component\";\nimport styled from \"@emotion/styled\";\n\nconst WeatherEngine = ({ location }) => {\n  //const location = \"cupertino, us\";\n  const [query, setQuery] = useState(\"\");\n  // const [city, setCity] = useState(\"\");\n  // const [temp, setTemp] = useState(\"\");\n  // const [condition, setCondition] = useState(\"\");\n  // const [country, setCountry] = useState(\"\");\n\n  //variable weather is an object that consists of all the temp, city etc.\n  const [weather, setWeather] = useState({\n    temp: null,\n    city: null,\n    condition: null,\n    country: null,\n  });\n\n  const getWeather = async (q) => {\n    const apiRes = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${q}&units=imperial&APPID=dddfe51d9e932708e36c71fd64e15b96`\n    );\n    const resJSON = await apiRes.json();\n    setWeather({\n      temp: resJSON.main.temp,\n      city: resJSON.name,\n      condition: resJSON.weather[0].main,\n      country: resJSON.sys.country,\n    });\n  };\n\n  //.then statement has access to value of promise, then you can do something to value\n  // data().then((res) => {\n  //   console.log(\"feels like is: \" + res.main.feels_like);\n  //   console.log(\"temp is: \" + res.main.temp);\n  // });\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    getWeather(query).then((res) => {\n      // setTemp(res.main.temp);\n      // setCondition(res.weather[0].main);\n      // setCountry(res.sys.country);\n      // setCity(res.name);\n      // setWeather({\n      //   temp: res.main.temp,\n      //   city: res.name,\n      //   condition: res.weather[0].main,\n      //   country: res.sys.country,\n      // });\n    });\n  };\n\n  //this is so we have a full card when we open the app\n  useEffect(() => {\n    getWeather(location);\n  }, [location]);\n\n  const WeatherEnginePack = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: 20px;\n    margin-top: 10px;\n  `;\n\n  return (\n    <WeatherEnginePack>\n      <WeatherCard\n        temp={weather.temp}\n        condition={weather.condition}\n        city={weather.city}\n        country={weather.country}\n      />\n      <form>\n        <input value={query} onChange={(e) => setQuery(e.target.value)} />\n        <button onClick={(e) => handleSearch(e)}>Search</button>\n      </form>\n    </WeatherEnginePack>\n  );\n};\n\nexport default WeatherEngine;\n","import React, { useState, useEffect } from \"react\";\nimport WeatherEngine from \"./components/WeatherEngine\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherEngine location=\"Cupertino, US\" />\n      <WeatherEngine location=\"Shanghai, CN\" />\n      <WeatherEngine location=\"Los Angeles, US\" />\n      <WeatherEngine location=\"Boston, US\" />\n      <WeatherEngine location=\"London, UK\" />\n      <WeatherEngine location=\"Toronto, CA\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}